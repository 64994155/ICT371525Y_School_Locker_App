@model ICT371525Y_School_Locker_App.DTO.AdminViewModel

<div class="container mt-4">
    <h2>Welcome, @Model.AdminName</h2>

    <div class="row">
        <!-- Parent Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    Manage Students Using Parent Search
                </div>
                <div class="card-body">
                    <button id="showParentSectionBtn" class="btn btn-outline-primary w-100">
                        Parent Id Number
                    </button>
                </div>
            </div>
        </div>

        <!-- Grade Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    Manage Students by Grade
                </div>
                <div class="card-body">
                    <button id="showGradeSectionBtn" class="btn btn-outline-success w-100">
                        Grade Search
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Student Search Card -->
    <div class="col-md-4">
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-warning text-dark">
                Manage Students by School Number
            </div>
            <div class="card-body">
                <button id="showStudentSectionBtn" class="btn btn-outline-warning w-100">
                    Student School Number
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Parent Section -->
        <div class="col-md-12">
            <div id="parentSection" style="@(Model.ShowParentSection ? "display:block;" : "display:none;")">
                <h2>Search Parent</h2>
                <form asp-action="SearchParent" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Parent ID Number</label>
                        <input asp-for="ParentIdNumber" class="form-control" placeholder="Enter Parent ID Number" />
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>

                @if (Model.ParentId != null)
                {
                    <hr />
                    <h2>Add Student</h2>
                    <form asp-action="AddStudent" method="post" class="mb-4">
                        <input type="hidden" asp-for="SchoolId" />
                        <input type="hidden" asp-for="ParentIdNumber" />
                        <input type="hidden" asp-for="ParentId" />

                        <div class="form-group mb-2">
                            <label>Student Name</label>
                            <input asp-for="StudentName" class="form-control" placeholder="Enter Student Name" />
                        </div>

                        <div class="form-group mb-2">
                            <label>Grade</label>
                            <select asp-for="SelectedGradeId" asp-items="ViewBag.Grades" class="form-control"></select>
                        </div>

                        <button type="submit" class="btn btn-success">Add Student</button>
                    </form>
                }

                @if (Model.AllocatedStudents != null && Model.AllocatedStudents.Any())
                {
                    <hr />
                    <h3>Allocated Students for @Model.ParentName (@Model.ParentIdNumber)</h3>
                    @foreach (var student in Model.AllocatedStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-primary text-white">
                                @student.StudentName (@student.StudentSchoolNumber)
                            </div>
                            <div class="card-body">
                                <div id="locker-info-@student.StudentId">
                                    <p>Loading locker info...</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Grade Section -->
        <div class="col-md-12">
            <div id="gradeSection" style="@(Model.ShowGradeSection ? "display:block;" : "display:none;")">
                <h2>Search by Grade</h2>
                <form id="gradeSearchForm" asp-action="SearchGrade" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Select Grade</label>
                        <select asp-for="SelectedGradeId" asp-items="Model.Grades" class="form-control"></select>
                    </div>
                    <div class="form-group mb-2">
                        <label>Filter</label>
                        <select asp-for="GradeFilter" class="form-control">
                            <option value="All">All Students</option>
                            <option value="Waiting">Only Waiting List</option>
                            <option value="Assigned">Only Assigned</option>
                            <option value="Unassigned">Only Unassigned</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success">Search</button>
                </form>

                @if (Model.GradeStudents != null && Model.GradeStudents.Any())
                {
                    <hr />
                    <h3>Students in Grade (Filter: @Model.GradeFilter)</h3>
                    @foreach (var student in Model.GradeStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-success text-white">
                                @student.StudentName (@student.StudentSchoolNumber)
                            </div>
                            <div class="card-body">
                                <div id="locker-info-@student.StudentId">
                                    <p>Loading locker info...</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Student Search Section -->
<div class="col-md-12">
    <div id="studentSection" style="@(Model.ShowStudentSection ? "display:block;" : "display:none;")">
        <h2>Search Student by Number</h2>
        <form asp-action="SearchStudentNumber" method="post" class="mb-4">
            <input type="hidden" asp-for="SchoolId" />
            <div class="form-group mb-2">
                <label>Student School Number</label>
                <input asp-for="StudentSchoolNumber" class="form-control" placeholder="Enter Student School Number" />
            </div>
            <button type="submit" class="btn btn-info">Search</button>
        </form>

        @if (Model.FoundStudent != null)
        {
            <hr />
            <h3>Search Result</h3>
            <div class="card mb-3 shadow-sm">
                <div class="card-header bg-info text-white">
                    @Model.FoundStudent.StudentName (@Model.FoundStudent.StudentSchoolNumber)
                </div>
                <div class="card-body">
                    <div id="locker-info-@Model.FoundStudent.StudentId">
                        <p>Loading locker info...</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        window.baseUrl = window.location.origin;
        const loaders = {};

            document.addEventListener("DOMContentLoaded", function () {
            // Toggle sections
            document.getElementById("showParentSectionBtn").addEventListener("click", () => {
                const el = document.getElementById("parentSection");
                el.style.display = el.style.display === "none" ? "block" : "none";
            });
            document.getElementById("showGradeSectionBtn").addEventListener("click", () => {
                const el = document.getElementById("gradeSection");
                el.style.display = el.style.display === "none" ? "block" : "none";
            });

            document.getElementById("showStudentSectionBtn").addEventListener("click", () => {
                const el = document.getElementById("studentSection");
                el.style.display = el.style.display === "none" ? "block" : "none";
            });

            const filter = "@Model.GradeFilter";

            @if ((Model.AllocatedStudents?.Any() ?? false) || (Model.GradeStudents?.Any() ?? false))
            {
                    var students = (Model.AllocatedStudents ?? Enumerable.Empty<ICT371525Y_School_Locker_App.DTO.StudentDto>())
                                                  .Concat(Model.GradeStudents ?? Enumerable.Empty<ICT371525Y_School_Locker_App.DTO.StudentDto>());
                    foreach (var student in students)
                    {
                            <text>
                                loadLockersForStudent(@student.StudentId, @student.SchoolId, @student.GradesId, filter);
                            </text>
                    }
            }

            @if (Model.FoundStudent != null)
            {
                    <text>
                        loadLockersForStudent(@Model.FoundStudent.StudentId, @Model.FoundStudent.SchoolId, @Model.FoundStudent.GradesId, "All");
                    </text>
            }
        });

        async function loadLockersForStudent(studentId, schoolId, gradeId, filter) {
            try {
                let html = "";
                const currentYear = new Date().getFullYear();
                const nextYear = currentYear + 1;

                // --- Assigned lockers ---
                const res = await fetch(`${window.baseUrl}/Locker/AssignedLocker/${studentId}`);
                const assignedLockers = res.ok ? await res.json() : [];

                if (filter === "Assigned" || filter === "All" || filter === "Unassigned") {
                    if (assignedLockers.length > 0) {
                        html += `<h6>Assigned Lockers</h6>`;
                        assignedLockers.forEach(l => {
                            html += `<div class="mb-2 p-2 border rounded">
                                        <p><strong>Locker:</strong> ${l.lockerNumber}</p>
                                        <p><strong>Year:</strong> ${l.year} (${l.yearType})</p>
                                        <p><strong>Approved:</strong> ${l.isAdminApproved ? "✅" : "❌"}</p>
                                        <button class="btn btn-sm btn-danger"
                                            onclick="cancelLocker(${l.lockerId}, ${studentId}, '${l.yearType}')">Cancel</button>
                                        ${!l.isAdminApproved ? `
                                            <button class="btn btn-sm btn-success ms-2"
                                                onclick="approveLocker(${l.lockerId}, ${studentId})">Approve</button>` : ``}
                                     </div>`;
                        });
                    } else if (filter === "Assigned") {
                        html += `<p>No lockers assigned.</p>`;
                    }
                }

                // --- Waiting list ---
                if (filter === "Waiting" || filter === "All") {
                    async function checkWaiting(yearType, year) {
                        const waitlistApi = `${window.baseUrl}/api/LockerWaitingList/IsUserOnWaitingList/${studentId}/${yearType}`;
                        const waitlistResponse = await fetch(waitlistApi);
                        const waitlistItems = waitlistResponse.ok ? await waitlistResponse.json() : [];

                        if (Array.isArray(waitlistItems) && waitlistItems.length > 0) {                         
                            html += `</div>`;
                                     waitlistItems.sort((a, b) => new Date(a.appliedDate) - new Date(b.appliedDate));
                              html += `<div class="alert alert-info mt-3"><h6>Waiting List (${year})</h6>`;
                              let firstShown = false;
                              for (const wl of waitlistItems) {
                                  html += `<p><strong>School:</strong> ${wl.schoolName}</p>
                                           <p><strong>Grade:</strong> ${wl.gradeName}</p>
                                           <p><strong>Applied:</strong> ${new Date(wl.appliedDate).toLocaleDateString()}</p>
                                           <button class="btn btn-sm btn-danger"
                                               onclick="cancelWaitingList(${studentId}, ${wl.schoolId}, ${wl.gradeId}, '${yearType}')">Cancel</button>`;
                    
                                  // show assign button only for first (next in line) if lockers exist
                                  if (!firstShown) {
                                      const lockersRes = await fetch(`${window.baseUrl}/Locker/adminAvailable?schoolId=${wl.schoolId}&gradeId=${wl.gradeId}&yearType=${yearType}`);
                                      const lockers = lockersRes.ok ? await lockersRes.json() : [];
                                      if (Array.isArray(lockers) && lockers.length > 0) {
                                          html += `<button class="btn btn-sm btn-success ms-2"
                                                      onclick="applyLocker(${lockers[0].lockerId}, ${studentId}, '${yearType}')">
                                                      Assign Next Locker</button>`;
                                      }
                                      firstShown = true;
                                  }
                                  html += `<hr/>`;
                              }
                              html += `</div>`;
                        }
                    }
                    await checkWaiting("current", currentYear);
                    if (gradeId != 24) await checkWaiting("following", nextYear);
                }

                // --- Unassigned logic ---
                if (filter === "Unassigned" || filter === "All") {
                    async function checkYear(year, yearType) {
                        if (assignedLockers.some(l => l.yearType === yearType)) return;

                              // ✅ Check waiting list first
                        const waitlistApi = `${window.baseUrl}/api/LockerWaitingList/IsUserOnWaitingList/${studentId}/${yearType}`;
                        const waitlistResponse = await fetch(waitlistApi);
                        const waitlistItems = waitlistResponse.ok ? await waitlistResponse.json() : [];

                        if (Array.isArray(waitlistItems) && waitlistItems.length > 0) {
                        if (filter === "Unassigned") {
                                // Only block in Unassigned filter
                                html += `<div class="alert alert-info mt-3">
                                            Already on Waiting List for ${year}.
                                         </div>`;
                                return; // 🚫 stop here
                            }
                            // If filter = All → let Waiting section handle it, so just skip locker selection
                            return;
                        }

                        const lockerApi = `${window.baseUrl}/Locker/available?schoolId=${schoolId}&gradeId=${gradeId}&yearType=${yearType}`;
                        const lockerResponse = await fetch(lockerApi);
                        const result = lockerResponse.ok ? await lockerResponse.json() : [];

                        if (result.cutoffReached) {
                            html += `<div class="alert alert-danger mt-3">${result.message}</div>`;
                            return;
                        }

                        const lockers = Array.isArray(result) ? result : [];
                        if (!lockers.length) {
                            html += `<div class="alert alert-warning mt-3">
                                        No lockers available for ${year}.
                                        <button class="btn btn-sm btn-warning"
                                            onclick="joinWaitingList(${studentId}, ${schoolId}, ${gradeId}, ${year}, '${yearType}')">Join Waiting List</button>
                                     </div>`;
                        } else {
                            html += `<h6>Available Lockers (${year})</h6>
                                     <table class="table table-bordered">
                                        <thead><tr><th>ID</th><th>Number</th><th>Action</th></tr></thead><tbody>`;
                            lockers.forEach(l => {
                                html += `<tr>
                                            <td>${l.lockerId}</td>
                                            <td>${l.lockerNumber}</td>
                                            <td><button class="btn btn-sm btn-primary"
                                                onclick="applyLocker(${l.lockerId}, ${studentId}, '${yearType}')">Assign</button></td>
                                         </tr>`;
                            });
                            html += `</tbody></table>`;
                        }
                    }
                    await checkYear(currentYear, "current");
                    if (gradeId != 24) await checkYear(nextYear, "following");
                }

                document.getElementById(`locker-info-${studentId}`).innerHTML = html || `<p>No locker info.</p>`;
            } catch (err) {
                document.getElementById(`locker-info-${studentId}`).innerHTML = `<p class="text-danger">Error: ${err.message}</p>`;
            }
        }

        // ---- GLOBAL FUNCTIONS ----
        window.applyLocker = async (lockerId, studentId, yearType) => {
            await fetch(`${window.baseUrl}/Locker/AdminAssignLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId, studentID: studentId, yearType })
            });
               refreshGradeSearch();
        };

        window.cancelLocker = async (lockerId, studentId, yearType) => {
            await fetch(`${window.baseUrl}/Locker/unassignLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId, studentID: studentId, yearType })
            });
              refreshGradeSearch();
        };

        window.approveLocker = async (lockerId, studentId) => {
            await fetch(`${window.baseUrl}/Admin/ApproveLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId })
            });
               refreshGradeSearch();
        };

        window.joinWaitingList = async (studentId, schoolId, gradeId, year, yearType) => {
            const payload = {
                studentId,
                schoolId,
                gradeId,
                appliedDate: new Date().toISOString(),
                currentYear: (yearType === "current"),
                followingYear: (yearType === "following"),
                status: true
            };
            await fetch(`${window.baseUrl}/api/LockerWaitingList/Assign`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
               refreshGradeSearch();
        };

        window.cancelWaitingList = async (studentId, schoolId, gradeId, yearType) => {
            await fetch(`${window.baseUrl}/api/LockerWaitingList/Unassign`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    studentId,
                    schoolId,
                    gradeId,
                    currentYear: (yearType === "current"),
                    followingYear: (yearType === "following")
                })
            });
               refreshGradeSearch();
        };

        function refreshGradeSearch() {
            const gradeForm = document.getElementById("gradeSearchForm");
            if (gradeForm) gradeForm.submit();
        }
    </script>
}
