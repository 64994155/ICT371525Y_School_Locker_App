@model ICT371525Y_School_Locker_App.DTO.AdminViewModel

<div class="container mt-4">
    <h2>Welcome, @Model.AdminName</h2>

    <div class="row">
        <!-- Parent Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">Manage Students Using Parent Search</div>
                <div class="card-body">
                    <button id="showParentSectionBtn" class="btn btn-outline-primary w-100">Parent Id Number</button>
                </div>
            </div>
        </div>

        <!-- Grade Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">Manage Students by Grade</div>
                <div class="card-body">
                    <button id="showGradeSectionBtn" class="btn btn-outline-success w-100">Grade Search</button>
                </div>
            </div>
        </div>

        <!-- Student Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-warning text-dark">Manage Students by School Number</div>
                <div class="card-body">
                    <button id="showStudentSectionBtn" class="btn btn-outline-warning w-100">Student School Number</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Parent Section -->
        <div class="col-md-12">
            <div id="parentSection" style="@(Model.ShowParentSection ? "display:block;" : "display:none;")">
                <h2>Search Parent</h2>
                <form asp-action="SearchParent" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Parent ID Number</label>
                        <input asp-for="ParentIdNumber" class="form-control" placeholder="Enter Parent ID Number" />
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>

                @if (Model.AllocatedStudents != null && Model.AllocatedStudents.Any())
                {
                    <hr />
                    <h3>Allocated Students for @Model.ParentName (@Model.ParentIdNumber)</h3>
                    @foreach (var student in Model.AllocatedStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-primary text-white">
                                @student.StudentName - Student Number : @student.StudentSchoolNumber
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Grade Section -->
        <div class="col-md-12">
            <div id="gradeSection" style="@(Model.ShowGradeSection ? "display:block;" : "display:none;")">
                <h2>Search by Grade</h2>
                <form id="gradeSearchForm" asp-action="SearchGrade" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Select Grade</label>
                        <select asp-for="SelectedGradeId" asp-items="Model.Grades" class="form-control"></select>
                    </div>
                    <div class="form-group mb-2">
                        <label>Filter</label>
                        <select asp-for="GradeFilter" class="form-control">
                            <option value="All" selected="@(Model.GradeFilter == "All")">All Students</option>
                            <option value="Waiting" selected="@(Model.GradeFilter == "Waiting")">Only Waiting List</option>
                            <option value="Assigned" selected="@(Model.GradeFilter == "Assigned")">Only Assigned</option>
                            <option value="Unassigned" selected="@(Model.GradeFilter == "Unassigned")">Only Unassigned</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success">Search</button>
                </form>

                @if (Model.GradeStudents != null && Model.GradeStudents.Any())
                {
                    <hr />
                    <h3>Students in Grade (Filter: @Model.GradeFilter)</h3>
                    @foreach (var student in Model.GradeStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-success text-white">
                                @student.StudentName (@student.StudentSchoolNumber)
                            </div>
                            <div class="card-body">
                                <div id="locker-info-@student.StudentId"><p>Loading locker info...</p></div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Student Search Section -->
<div class="col-md-12">
    <div id="studentSection" style="@(Model.ShowStudentSection ? "display:block;" : "display:none;")">
        <h2>Search Student by Number</h2>
        <form id="studentSearchForm" asp-action="SearchStudentNumber" method="post" class="mb-4">
            <input type="hidden" asp-for="SchoolId" />
            <div class="form-group mb-2">
                <label>Student School Number</label>
                <input asp-for="StudentSchoolNumber" class="form-control" placeholder="Enter Student School Number" />
            </div>
            <button type="submit" class="btn btn-info">Search</button>
        </form>

        @if (Model.FoundStudent != null)
        {
            <hr />
            <h3>Search Result</h3>
            <div class="card mb-3 shadow-sm">
                <div class="card-header bg-info text-white">
                    @Model.FoundStudent.StudentName (@Model.FoundStudent.StudentSchoolNumber)
                </div>
                <div class="card-body">
                    <div id="locker-info-@Model.FoundStudent.StudentId"><p>Loading locker info...</p></div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        window.baseUrl = window.location.origin;

        document.addEventListener("DOMContentLoaded", function () {
            // Toggle UI sections
            ["Parent","Grade","Student"].forEach(sec=>{
                const btn=document.getElementById(`show${sec}SectionBtn`);
                if(btn){
                    btn.addEventListener("click",()=>{
                        const el=document.getElementById(`${sec.toLowerCase()}Section`);
                        el.style.display = (el.style.display==="none")?"block":"none";
                    });
                }
            });

                    const filter = "@Model.GradeFilter";

            // --- Load Grade search students in one call
            @if (Model.GradeStudents?.Any() ?? false)
            {
                    <text>
                    loadGradeLockers(@Model.SchoolId, @Model.SelectedGradeId, filter);
                    </text>
            }

            // --- Load single student search (still uses /Admin/All/{id})
            @if (Model.FoundStudent != null)
            {
                    <text>
                    loadStudentLockers(@Model.FoundStudent.StudentId, "All");
                    </text>
            }
        });

        // ---------------- Core Loader ----------------
        async function loadGradeLockers(schoolId, gradeId, filter) {
            try {
                const res = await fetch(`${window.baseUrl}/Admin/AllByGrade/${schoolId}/${gradeId}`);
                if (!res.ok) throw new Error(await res.text());
                const data = await res.json();

                for (const studentId in data) {
                    const studentData = data[studentId];
                    let html = "";

                    switch (filter) {
                        case "Assigned":
                            html = renderAssigned(studentData.assigned, parseInt(studentId));
                            break;
                        case "Waiting":
                            html = renderWaiting(studentData.waiting, parseInt(studentId));
                            break;
                        case "Unassigned":
                            html = renderUnassigned(studentData.unassigned, parseInt(studentId));
                            break;
                        case "All":
                        default:
                            if (studentData.waiting?.length)
                                html += renderWaiting(studentData.waiting, parseInt(studentId));
                            if (studentData.assigned?.length)
                                html += renderAssigned(studentData.assigned, parseInt(studentId));
                            if (studentData.unassigned &&
                                (studentData.unassigned.current?.length || studentData.unassigned.following?.length))
                                html += renderUnassigned(studentData.unassigned, parseInt(studentId));
                            break;
                    }

                    const container = document.getElementById(`locker-info-${parseInt(studentId)}`);
                    if (container) {
                        if (html) {
                            container.innerHTML = html;
                            container.closest(".card").style.display = "block"; // ✅ show card
                        } else if (filter === "Unassigned") {
                            container.closest(".card").style.display = "none";   // ✅ hide card if no unassigned
                        } else {
                            container.innerHTML = `<p>No locker info.</p>`;
                        }
                    }
                }
            } catch (err) {
                console.error("Error loading grade lockers:", err);
            }
        }

        async function loadStudentLockers(studentId, filter) {
            try {
                const res = await fetch(`${window.baseUrl}/Admin/All/${studentId}`);
                if (!res.ok) throw new Error(await res.text());
                const studentData = await res.json();

                let html = "";

                switch (filter) {
                    case "Assigned":
                        if (studentData.assigned?.length) {
                            html = renderAssigned(studentData.assigned, studentId);
                        }
                        break;
                    case "Waiting":
                        if (studentData.waiting?.length) {
                            html = renderWaiting(studentData.waiting, studentId);
                        }
                        break;
                    case "Unassigned":
                        if (studentData.unassigned &&
                            (studentData.unassigned.current?.length || studentData.unassigned.following?.length)) {
                            html = renderUnassigned(studentData.unassigned, studentId);
                        }
                        break;
                    case "All":
                    default:
                        if (studentData.waiting?.length)
                            html += renderWaiting(studentData.waiting, studentId);
                        if (studentData.assigned?.length)
                            html += renderAssigned(studentData.assigned, studentId);
                        if (studentData.unassigned &&
                            (studentData.unassigned.current?.length || studentData.unassigned.following?.length))
                            html += renderUnassigned(studentData.unassigned, studentId);
                        break;
                }

                // 🚩 Skip rendering card if filter=Unassigned and no unassigned values
                if (filter === "Unassigned" && !html) return;

                const container = document.getElementById(`locker-info-${studentId}`);
                if (container) container.innerHTML = html || `<p>No locker info.</p>`;
            } catch (err) {
                console.error("Error loading student lockers:", err);
            }
        }

        // ---------------- Renderers ----------------
                   function renderAssigned(assigned, studentId) {
            if (!assigned || !assigned.length) return "";
            let html = `<h6>Assigned Lockers</h6>`;
            assigned.forEach(l => {
                html += `<div class="p-2 border rounded mb-2">
                            <p><strong>Locker:</strong> ${l.lockerNumber}</p>
                            <p><strong>Year:</strong> ${l.yearType}</p>
                            <p><strong>Approved:</strong> ${l.isAdminApproved ? "✅" : "❌"}</p>
                            <button class="btn btn-sm btn-danger" onclick="cancelLocker(${l.lockerId}, ${studentId}, '${l.yearType}')">Cancel</button>
                            ${!l.isAdminApproved ? `<button class="btn btn-sm btn-success ms-2" onclick="approveLocker(${l.lockerId}, ${studentId})">Approve</button>` : ``}
                         </div>`;
            });
            return html;
        }

        function renderWaiting(waiting, studentId) {
            if (!waiting || !waiting.length) return "";
            let html = `<h6>Waiting List</h6>`;
            waiting.forEach(wl => {
                html += `<div class="alert alert-info mb-2">
                            <p><strong>School:</strong> ${wl.schoolName}</p>
                            <p><strong>Grade:</strong> ${wl.gradeName}</p>
                            <p><strong>Applied:</strong> ${new Date(wl.appliedDate).toLocaleDateString()}</p>
                            <button class="btn btn-sm btn-danger" onclick="cancelWaitingList(${studentId}, ${wl.schoolId}, ${wl.gradeId}, '${wl.yearType}')">Cancel</button>
                         </div>`;
            });
            return html;
        }

        function renderUnassigned(unassigned, studentId) {
            if (!unassigned) return ""; // nothing available at all

            let html = `<h6>Available Lockers</h6>`;

            if (unassigned.current && unassigned.current.length) {
                html += `<h6 class="mt-2">Current Year</h6>
                         <table class="table table-bordered">
                         <thead><tr><th>ID</th><th>Number</th><th>Action</th></tr></thead><tbody>`;
                unassigned.current.forEach(l => {
                    html += `<tr>
                                <td>${l.lockerId}</td>
                                <td>${l.lockerNumber}</td>
                                <td>
                                  <button class="btn btn-sm btn-primary"
                                          onclick="applyLocker(${l.lockerId}, ${studentId}, 'current')">
                                          Assign
                                  </button>
                                </td>
                             </tr>`;
                });
                html += `</tbody></table>`;
            }

            if (unassigned.following && unassigned.following.length) {
                html += `<h6 class="mt-2">Following Year</h6>
                         <table class="table table-bordered">
                         <thead><tr><th>ID</th><th>Number</th><th>Action</th></tr></thead><tbody>`;
                unassigned.following.forEach(l => {
                    html += `<tr>
                                <td>${l.lockerId}</td>
                                <td>${l.lockerNumber}</td>
                                <td>
                                  <button class="btn btn-sm btn-primary"
                                          onclick="applyLocker(${l.lockerId}, ${studentId}, 'following')">
                                          Assign
                                  </button>
                                </td>
                             </tr>`;
                });
                html += `</tbody></table>`;
            }

            return html;
        }

        // ---------------- Actions ----------------
        async function applyLocker(lockerId,studentId,yearType){
            await fetch(`${window.baseUrl}/Locker/AdminAssignLocker`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lockerId,studentId,yearType})});
            refreshSearch(studentId);
        }
        async function cancelLocker(lockerId,studentId,yearType){
            await fetch(`${window.baseUrl}/Locker/UnassignLocker`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lockerId,studentId,yearType})});
            refreshSearch(studentId);
        }
        async function approveLocker(lockerId,studentId){
            await fetch(`${window.baseUrl}/Admin/ApproveLocker`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lockerId})});
            refreshSearch(studentId);
        }
        async function applyLockerFromWaiting(studentId,schoolId,gradeId,yearType){
            await fetch(`${window.baseUrl}/Locker/adminAvailable?schoolId=${schoolId}&gradeId=${gradeId}&yearType=${yearType}`);
            refreshSearch(studentId);
        }
        async function cancelWaitingList(studentId,schoolId,gradeId,yearType){
            await fetch(`${window.baseUrl}/api/LockerWaitingList/Unassign`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({studentId,schoolId,gradeId,yearType})});
            refreshSearch(studentId);
        }

        function refreshSearch(studentId){
            const studentForm=document.getElementById("studentSearchForm");
            const gradeForm=document.getElementById("gradeSearchForm");
            if(studentForm && document.getElementById("studentSection").style.display!=="none") studentForm.submit();
            else if(gradeForm && document.getElementById("gradeSection").style.display!=="none") gradeForm.submit();
        }
    </script>
}
