@model ICT371525Y_School_Locker_App.DTO.AdminViewModel

<div class="container mt-4">
    <h2>Welcome, @Model.AdminName</h2>

    <div class="row">
        <!-- Parent Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    Manage Students Using Parent Search
                </div>
                <div class="card-body">
                    <button id="showParentSectionBtn" class="btn btn-outline-primary w-100">
                        Parent Id Number
                    </button>
                </div>
            </div>
        </div>

        <!-- Grade Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">
                    Manage Students by Grade
                </div>
                <div class="card-body">
                    <button id="showGradeSectionBtn" class="btn btn-outline-success w-100">
                        Grade Search
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Parent Section -->
        <div class="col-md-12">
            <div id="parentSection" style="@(Model.ShowParentSection ? "display:block;" : "display:none;")">
                <h2>Search Parent</h2>
                <form asp-action="SearchParent" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Parent ID Number</label>
                        <input asp-for="ParentIdNumber" class="form-control" placeholder="Enter Parent ID Number" />
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>

                @if (Model.ParentId != null)
                {
                    <hr />
                    <h2>Add Student</h2>
                    <form asp-action="AddStudent" method="post" class="mb-4">
                        <input type="hidden" asp-for="SchoolId" />
                        <input type="hidden" asp-for="ParentIdNumber" />
                        <input type="hidden" asp-for="ParentId" />

                        <div class="form-group mb-2">
                            <label>Student Name</label>
                            <input asp-for="StudentName" class="form-control" placeholder="Enter Student Name" />
                        </div>

                        <div class="form-group mb-2">
                            <label>Grade</label>
                            <select asp-for="SelectedGradeId" asp-items="ViewBag.Grades" class="form-control"></select>
                        </div>

                        <button type="submit" class="btn btn-success">Add Student</button>
                    </form>
                }

                @if (Model.AllocatedStudents != null && Model.AllocatedStudents.Any())
                {
                    <hr />
                    <h3>Allocated Students for @Model.ParentName (@Model.ParentIdNumber)</h3>
                    @foreach (var student in Model.AllocatedStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-primary text-white">
                                @student.StudentName (@student.StudentSchoolNumber)
                            </div>
                            <div class="card-body">
                                <div id="locker-info-@student.StudentId">
                                    <p>Loading locker info...</p>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Grade Section -->
        <div class="col-md-12">
            <div id="gradeSection" style="@(Model.ShowGradeSection ? "display:block;" : "display:none;")">
                <h2>Search by Grade</h2>
                <form asp-action="SearchGrade" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Select Grade</label>
                        <select asp-for="SelectedGradeId" asp-items="Model.Grades" class="form-control"></select>
                    </div>
                    <div class="form-group mb-2">
                        <label>Filter</label>
                        <select asp-for="GradeFilter" class="form-control">
                            <option value="All">All Students</option>
                            <option value="Waiting">Only Waiting List</option>
                            <option value="Assigned">Only Assigned</option>
                            <option value="Unassigned">Only Unassigned</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success">Search</button>
                </form>

                @if (Model.GradeStudents != null && Model.GradeStudents.Any())
                {
                    <hr />
                    <h3>Students in Grade</h3>
                    @foreach (var student in Model.GradeStudents)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-header bg-success text-white">
                                @student.StudentName (@student.StudentSchoolNumber)
                            </div>
                            <div class="card-body">
                                <div id="locker-info-@student.StudentId">
                                    <p>Loading locker info...</p>
                                </div>

                                @* Extra section for Unassigned only *@
                                @if (Model.GradeFilter == "Unassigned" && !student.HasLockerAssigned && !student.IsOnWaitingList)
                                {
                                    <div id="unassigned-lockers-@student.StudentId">
                                        <p>Checking available lockers...</p>
                                    </div>
                                    <script>
                                        (function () {
                                            const studentId = @student.StudentId;
                                            const schoolId = @student.SchoolId;
                                            const gradeId = @student.GradesId;
                                            const container = document.getElementById("unassigned-lockers-" + studentId);
                                            const currentYear = new Date().getFullYear();
                                            const nextYear = currentYear + 1;

                                            async function renderUnassigned(yearType, yearDisplay) {
                                                let html = `<h6>${yearDisplay}</h6>`;
                                                try {
                                                    const res = await fetch(`${window.baseUrl}/Locker/available?schoolId=${schoolId}&gradeId=${gradeId}&yearType=${yearType}`);
                                                    const lockers = res.ok ? await res.json() : [];

                                                    if (lockers.length > 0) {
                                                        lockers.forEach(l => {
                                                            html += `<div class="mb-2 p-2 border rounded">
                                                                        <p><strong>Locker:</strong> ${l.lockerNumber}</p>
                                                                        <button class="btn btn-sm btn-primary"
                                                                            onclick="applyLocker(${l.lockerId}, ${studentId}, '${yearType}')">
                                                                            Assign
                                                                        </button>
                                                                     </div>`;
                                                        });
                                                    } else {
                                                        html += `<div class="alert alert-warning">
                                                                    No lockers available.
                                                                    <button class="btn btn-sm btn-warning"
                                                                        onclick="joinWaitingList(${studentId}, ${schoolId}, ${gradeId}, ${yearType === 'current' ? currentYear : nextYear}, '${yearType}')">
                                                                        Join Waiting List
                                                                    </button>
                                                                 </div>`;
                                                    }
                                                } catch (err) {
                                                    html += `<p class="text-danger">Error: ${err.message}</p>`;
                                                }
                                                return html;
                                            }

                                            (async function () {
                                                let html = "";
                                                html += await renderUnassigned("current", currentYear);
                                                if (gradeId !== 24) {
                                                    html += await renderUnassigned("following", nextYear);
                                                }
                                                container.innerHTML = html;
                                            })();
                                        })();
                                    </script>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        window.baseUrl = window.location.origin;
        const loaders = {};

        document.addEventListener("DOMContentLoaded", function () {
            // Toggle sections
            document.getElementById("showParentSectionBtn").addEventListener("click", () => {
                const el = document.getElementById("parentSection");
                el.style.display = el.style.display === "none" ? "block" : "none";
            });
            document.getElementById("showGradeSectionBtn").addEventListener("click", () => {
                const el = document.getElementById("gradeSection");
                el.style.display = el.style.display === "none" ? "block" : "none";
            });

            // Attach loaders
            @if ((Model.AllocatedStudents?.Any() ?? false) || (Model.GradeStudents?.Any() ?? false))
            {
                    var students = (Model.AllocatedStudents ?? Enumerable.Empty<ICT371525Y_School_Locker_App.DTO.StudentDto>())
                                                  .Concat(Model.GradeStudents ?? Enumerable.Empty<ICT371525Y_School_Locker_App.DTO.StudentDto>());
                    foreach (var student in students)
                    {
                            <text>
                            (function() {
                                const studentId = @student.StudentId;
                                const container = document.getElementById(`locker-info-${studentId}`);

                                async function loadLockers() {
                                    try {
                                        let html = "";

                                        // Assigned lockers
                                        const res = await fetch(`${window.baseUrl}/Locker/AssignedLocker/${studentId}`);
                                        const lockers = res.ok ? await res.json() : [];
                                        if (lockers.length > 0) {
                                            html += `<h6>Assigned Lockers</h6>`;
                                            lockers.forEach(l => {
                                                html += `<div class="mb-2 p-2 border rounded">
                                                            <p><strong>Locker:</strong> ${l.lockerNumber}</p>
                                                            <p><strong>Year:</strong> ${l.year} (${l.yearType})</p>
                                                            <p><strong>Approved:</strong> ${l.isAdminApproved ? "✅" : "❌"}</p>
                                                         </div>`;
                                            });
                                        }

                                        // Waiting list logic ✅
                                        const waitlistRes = await fetch(`${window.baseUrl}/api/LockerWaitingList/IsUserOnWaitingList/${studentId}/current`);
                                        const waitlist = waitlistRes.ok ? await waitlistRes.json() : [];
                                        if (Array.isArray(waitlist) && waitlist.length > 0) {
                                            waitlist.sort((a, b) => new Date(a.appliedDate) - new Date(b.appliedDate));
                                            html += `<div class="alert alert-info mt-3"><h6>Waiting List (Current)</h6>`;
                                            let firstShown = false;
                                            for (const wl of waitlist) {
                                                html += `<p><strong>School:</strong> ${wl.schoolName}</p>
                                                         <p><strong>Grade:</strong> ${wl.gradeName}</p>
                                                         <p><strong>Applied Date:</strong> ${new Date(wl.appliedDate).toLocaleDateString()}</p>
                                                         <button class="btn btn-sm btn-danger"
                                                             onclick="cancelWaitingList(${studentId}, ${wl.schoolId}, ${wl.gradeId}, 'current')">
                                                             Cancel Waiting List</button>`;
                                                if (!firstShown) {
                                                    const lockersRes = await fetch(`${window.baseUrl}/Locker/available?schoolId=${wl.schoolId}&gradeId=${wl.gradeId}&yearType=current`);
                                                    const lockers = lockersRes.ok ? await lockersRes.json() : [];
                                                    if (lockers.length > 0) {
                                                        html += `<button class="btn btn-sm btn-success ms-2"
                                                                    onclick="applyLocker(${lockers[0].lockerId}, ${studentId}, 'current')">
                                                                    Assign Locker (Next in Line)</button>`;
                                                    }
                                                    firstShown = true;
                                                }
                                                html += `<hr/>`;
                                            }
                                            html += `</div>`;
                                        }

                                        container.innerHTML = html || `<p>No locker info.</p>`;
                                    } catch (err) {
                                        container.innerHTML = `<p class="text-danger">Error: ${err.message}</p>`;
                                    }
                                }

                                loaders[studentId] = loadLockers;
                                loadLockers();
                            })();
                            </text>
                    }
            }
        });

        // Global actions
        window.applyLocker = async (lockerId, studentId, yearType) => {
            await fetch(`${window.baseUrl}/Locker/AdminAssignLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId, studentID: studentId, yearType })
            });
            if (loaders[studentId]) loaders[studentId]();
        };

        window.cancelLocker = async (lockerId, studentId, yearType) => {
            await fetch(`${window.baseUrl}/Locker/UnassignLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId, studentID: studentId, yearType })
            });
            if (loaders[studentId]) loaders[studentId]();
        };

        window.approveLocker = async (lockerId, studentId) => {
            const response = await fetch(`${window.baseUrl}/Admin/ApproveLocker`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ lockerId })
            });
            if (!response.ok) alert("Error approving locker");
            if (loaders[studentId]) loaders[studentId]();
        };

        // ✅ Join Waiting List function (was missing)
        window.joinWaitingList = async (studentId, schoolId, gradeId, year, yearType) => {
            const payload = {
                studentId,
                schoolId,
                gradeId,
                appliedDate: new Date().toISOString(),
                currentYear: yearType === "current",
                followingYear: yearType === "following",
                status: true,
                yearType
            };
            const res = await fetch(`${window.baseUrl}/api/LockerWaitingList/Assign`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });
            if (!res.ok) {
                alert("Error adding to waiting list");
                return;
            }
            if (loaders[studentId]) loaders[studentId]();
        };

        // ✅ Cancel Waiting List
        window.cancelWaitingList = async (studentId, schoolId, gradeId, yearType) => {
            await fetch(`${window.baseUrl}/api/LockerWaitingList/Unassign`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    studentId,
                    schoolId,
                    gradeId,
                    currentYear: (yearType === "current"),
                    followingYear: (yearType === "following")
                })
            });
            if (loaders[studentId]) loaders[studentId]();
        };    
    </script>
}
