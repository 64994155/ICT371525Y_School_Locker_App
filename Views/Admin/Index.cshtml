@model ICT371525Y_School_Locker_App.DTO.AdminViewModel

<div class="container mt-4">
    <h2>Welcome, @Model.AdminName</h2>

    <div class="row">
        <!-- Parent Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">Manage Students Using Parent Search</div>
                <div class="card-body">
                    <button id="showParentSectionBtn" class="btn btn-outline-primary w-100">Parent Id Number</button>
                </div>
            </div>
        </div>

        <!-- Grade Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-success text-white">Manage Students by Grade</div>
                <div class="card-body">
                    <button id="showGradeSectionBtn" class="btn btn-outline-success w-100">Grade Search</button>
                </div>
            </div>
        </div>

        <!-- Student Search Card -->
        <div class="col-md-4">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-warning text-dark">Manage Students by School Number</div>
                <div class="card-body">
                    <button id="showStudentSectionBtn" class="btn btn-outline-warning w-100">Student School Number</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">

        <!-- Parent Section -->
        <div class="col-md-12">
            <div id="parentSection" style="@(Model.ShowParentSection ? "display:block;" : "display:none;")">
                <h2>Search Parent</h2>
                <form asp-action="SearchParent" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Parent ID Number</label>
                        <input asp-for="ParentIdNumber" class="form-control" placeholder="Enter Parent ID Number" />
                    </div>
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>

                @if (Model.AllocatedStudents != null && Model.AllocatedStudents.Any())
                {
                    <hr />
                    <h3>Allocated Students for @Model.ParentName (@Model.ParentIdNumber)</h3>

                    <table class="table table-bordered mt-3">
                        <thead class="table-light">
                            <tr>
                                <th>Student Name</th>
                                <th>School Number</th>
                                <th>Paid Current Year</th>
                                <th>Paid Following Year</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var student in Model.AllocatedStudents)
                            {
                                <tr>
                                    <td>@student.StudentName</td>
                                    <td>@student.StudentSchoolNumber</td>
                                    <td>
                                        <input type="checkbox"
                                               @(student.PaidCurrentYear ? "checked" : "")
                                               onchange="updatePayment(@student.StudentId, 'current', this.checked)" />
                                    </td>
                                    <td>
                                        <input type="checkbox"
                                               @(student.PaidFollowingYear ? "checked" : "")
                                               onchange="updatePayment(@student.StudentId, 'following', this.checked)" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

                @if (Model.ParentId.HasValue)
                {
                    <hr />
                    <h3>Register New Student for @Model.ParentName</h3>
                    <form asp-action="AddStudent" method="post" class="mb-4">
                        <input type="hidden" asp-for="SchoolId" />
                        <input type="hidden" asp-for="ParentId" />
                        <input type="hidden" asp-for="ParentIdNumber" />

                        <div class="form-group mb-2">
                            <label>Student Name</label>
                            <input asp-for="StudentName" class="form-control" placeholder="Enter Student Name" />
                        </div>

                        <div class="form-group mb-2">
                            <label>Select Grade</label>
                            <select asp-for="SelectedGradeId" asp-items="Model.Grades" class="form-control"></select>
                        </div>

                        <button type="submit" class="btn btn-success">Add Student</button>
                    </form>
                }
            </div>
        </div>

        <!-- Grade Section -->
        <div class="col-md-12">
            <div id="gradeSection" style="@(Model.ShowGradeSection ? "display:block;" : "display:none;")">
                <h2>Search by Grade</h2>
                <form id="gradeSearchForm" asp-action="SearchGrade" method="post" class="mb-4">
                    <input type="hidden" asp-for="SchoolId" />
                    <div class="form-group mb-2">
                        <label>Select Grade</label>
                        <select asp-for="SelectedGradeId" asp-items="Model.Grades" class="form-control"></select>
                    </div>
                    <div class="form-group mb-2">
                        <label>Filter</label>
                        <select asp-for="GradeFilter" class="form-control">
                            <option value="All" selected="@(Model.GradeFilter == "All")">All Students</option>
                            <option value="Waiting" selected="@(Model.GradeFilter == "Waiting")">Only Waiting List</option>
                            <option value="Assigned" selected="@(Model.GradeFilter == "Assigned")">Only Assigned</option>
                            <option value="Unassigned" selected="@(Model.GradeFilter == "Unassigned")">Only Unassigned</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success">Search</button>
                </form>

                <div id="gradeStudentsContainer"></div>
            </div>
        </div>
    </div>
</div>

<!-- Student Search Section -->
<div class="col-md-12">
    <div id="studentSection" style="@(Model.ShowStudentSection ? "display:block;" : "display:none;")">
        <h2>Search Student by Number</h2>
        <form id="studentSearchForm" asp-action="SearchStudentNumber" method="post" class="mb-4">
            <input type="hidden" asp-for="SchoolId" />
            <div class="form-group mb-2">
                <label>Student School Number</label>
                <input asp-for="StudentSchoolNumber" class="form-control" placeholder="Enter Student School Number" />
            </div>
            <button type="submit" class="btn btn-info">Search</button>
        </form>

        <div id="studentResultContainer"></div>
    </div>
</div>

@section Scripts {
    <script>
        window.baseUrl = window.location.origin;

        document.addEventListener("DOMContentLoaded", function () {
            ["Parent","Grade","Student"].forEach(sec=>{
                const btn=document.getElementById(`show${sec}SectionBtn`);
                if(btn){
                    btn.addEventListener("click",()=>{
                        const el=document.getElementById(`${sec.toLowerCase()}Section`);
                        el.style.display = (el.style.display==="none")?"block":"none";
                    });
                }
            });

            const filter = "@Model.GradeFilter";

            @if (Model.GradeStudents?.Any() ?? false)
            {
                    <text>loadGradeLockers(@Model.SchoolId, @Model.SelectedGradeId, filter);</text>
            }

            @if (Model.FoundStudent != null)
            {
                    <text>loadStudentLockers(@Model.FoundStudent.StudentId, "All");</text>
            }
        });

        // ---------------- Core Loader ----------------
              async function loadGradeLockers(schoolId, gradeId, filter) {
            const container = document.getElementById("gradeStudentsContainer");
            container.innerHTML = "";

            try {
                const res = await fetch(`${window.baseUrl}/Admin/AllByGrade/${schoolId}/${gradeId}`);
                if (!res.ok) throw new Error(await res.text());
                const data = await res.json();

                let students = Array.isArray(data)
                    ? data
                    : Object.entries(data).map(([id, studentData]) => ({
                          studentId: parseInt(id, 10),
                          ...studentData
                      }));

                students.sort(compareByEarliestWaiting);

                for (const student of students) {
                    const innerHtml = buildStudentContent(student, filter);
                    const card = renderStudentCard(student, innerHtml);
                    if (card) container.insertAdjacentHTML("beforeend", card);
                }
            } catch (err) {
                console.error("Error loading grade lockers:", err);
                container.innerHTML = `<p class="text-danger">Error loading students.</p>`;
            }
        }

        async function loadStudentLockers(studentId, filter) {
            const container = document.getElementById("studentResultContainer");
            container.innerHTML = "";

            try {
                const res = await fetch(`${window.baseUrl}/Admin/All/${studentId}`);
                if (!res.ok) throw new Error(await res.text());
                const studentData = await res.json();
                const innerHtml = buildStudentContent({studentId, ...studentData}, filter);
                const card = renderStudentCard({studentId, ...studentData}, innerHtml);
                if (card) container.innerHTML = card;
            } catch (err) {
                console.error("Error loading student lockers:", err);
                container.innerHTML = `<p class="text-danger">Error loading student.</p>`;
            }
        }

        // ---------------- Content Builder ----------------
        function buildStudentContent(student, filter) {
            let html = "";
            switch (filter) {
                case "Assigned":
                    if (student.assigned?.length) html = renderAssigned(student.assigned, student.studentId);
                    break;
                case "Waiting":
                    if (student.waiting?.length) html = renderWaiting(student.waiting, student.studentId, student.unassigned);
                    break;
                case "Unassigned":
                    if (student.unassigned) {
                        const isOnCurrentWaiting = student.waiting?.some(w => w.yearType === "current");
                        const isOnFollowingWaiting = student.waiting?.some(w => w.yearType === "following");

                        //Filter out lockers for years where the student is on the waiting list
                        const filteredUnassigned = {
                            current: isOnCurrentWaiting ? [] : (student.unassigned.current || []),
                            following: isOnFollowingWaiting ? [] : (student.unassigned.following || [])
                        };

                        //Only render section if there's something to show
                        const hasVisibleLockers =
                            (filteredUnassigned.current?.length || 0) > 0 ||
                            (filteredUnassigned.following?.length || 0) > 0;

                        if (hasVisibleLockers) {
                            html += renderUnassigned(
                                filteredUnassigned,
                                student.studentId,
                                student.schoolId,
                                student.gradeId,
                                student.waiting,
                                student.assigned
                            );
                        }
                    }
                break;
                case "All":
                default:
                    if (student.waiting?.length) html += renderWaiting(student.waiting, student.studentId, student.unassigned);
                    if (student.assigned?.length) html += renderAssigned(student.assigned, student.studentId);
                    if (student.unassigned) {
                        html += renderUnassigned(
                            student.unassigned,
                            student.studentId,
                            student.schoolId,
                            student.gradeId,
                            student.waiting,
                            student.assigned
                        );
                }

                    break;
            }
            return html;
        }

               // --- helper: get earliest waiting date for a student (or null) ---
        function getEarliestWaitingDate(student) {
            if (!student.waiting || !student.waiting.length) return null;
            let min = null;
            for (const w of student.waiting) {
                const d = new Date(w.appliedDate);
                if (!min || d < min) min = d;
            }
            return min;
        }

        // --- helper: compare two students by earliest waiting date ---
        function compareByEarliestWaiting(a, b) {
            const da = getEarliestWaitingDate(a);
            const db = getEarliestWaitingDate(b);
            if (da && db) return da - db;     // earliest first
            if (da) return -1;                // a has waiting, b doesn't
            if (db) return 1;                 // b has waiting, a doesn't
            // tie-breaker to keep sort deterministic (optional)
            return (a.studentName || "").localeCompare(b.studentName || "") || (a.studentId - b.studentId);
        }

        // ---------------- Student Card Renderer ----------------
        function renderStudentCard(student, innerHtml) {
            if (!innerHtml) return "";
            return `
                <div class="card mb-3 shadow-sm">
                    <div class="card-header bg-secondary text-white">
                       Student: ${student.studentName}(${student.studentSchoolNumber}) Parent ID: (${student.parentIdNumber})
                    </div>
                    <div class="card-body">
                        ${innerHtml}
                    </div>
                </div>`;
        }

        // ---------------- Renderers ----------------
        function renderAssigned(assigned, studentId) {
            if (!assigned || !assigned.length) return "";
            let html = `<h6>Assigned Lockers</h6>`;
            assigned.forEach(l => {
                html += `<div class="p-2 border rounded mb-2">
                            <p><strong>Locker:</strong> ${l.lockerNumber}</p>
                            <p><strong>Year:</strong> ${l.yearType}</p>
                            <p><strong>Approved:</strong> ${l.isAdminApproved ? "✅" : "❌"}</p>
                            <button class="btn btn-sm btn-danger" onclick="cancelLocker(${l.lockerId}, ${studentId}, '${l.yearType}')">Cancel</button>
                            ${!l.isAdminApproved ? `<button class="btn btn-sm btn-success ms-2" onclick="approveLocker(${l.lockerId}, ${studentId}, '${l.yearType}')">Approve</button>` : ``}
                         </div>`;
            });
            return html;
        }

        function renderWaiting(waiting, studentId, unassigned) {
            if (!waiting || !waiting.length) return "";
            let html = `<h6>Waiting List</h6>`;

            waiting.forEach(wl => {
                //Check availability based on requested year type
                    const hasAvailable =
                        (wl.yearType === "current" && ((unassigned?.allCurrent?.length ?? unassigned?.current?.length ?? 0) > 0)) ||
                        (wl.yearType === "following" && ((unassigned?.allFollowing?.length ?? unassigned?.following?.length ?? 0) > 0));

                html += `<div class="alert alert-info mb-2">
                            <p><strong>School:</strong> ${wl.schoolName}</p>
                            <p><strong>Grade:</strong> ${wl.gradeName}</p>
                            <p><strong>Applied:</strong> ${new Date(wl.appliedDate).toLocaleDateString()}</p>
                            <button class="btn btn-sm btn-danger"
                                    onclick="cancelWaitingList(${studentId}, ${wl.schoolId}, ${wl.gradeId}, '${wl.yearType}')">
                                Cancel
                            </button>
                            ${hasAvailable
                                ? `<button class="btn btn-sm btn-primary ms-2"
                                           onclick="assignFromWaiting(${studentId}, '${wl.yearType}', ${wl.schoolId}, ${wl.gradeId})">
                                       Assign
                                   </button>`
                                : ``}
                         </div>`;
            });

            return html;
        }

         function renderUnassigned(unassigned, studentId, schoolId, gradeId, waiting = [], assigned = []) {
            if (!unassigned) return "";
            let html = `<h6>Available Lockers</h6>`;

            // --- Helper flags ---
            const isOnCurrentWaiting = waiting.some(w => w.yearType === "current");
            const isOnFollowingWaiting = waiting.some(w => w.yearType === "following");
            const hasCurrentAssigned = assigned.some(a => a.yearType === "current");
            const hasFollowingAssigned = assigned.some(a => a.yearType === "following");

            // --- CURRENT YEAR ---
            if (!hasCurrentAssigned) {
                if (unassigned.current?.length) {
                    html += `<h6 class="mt-2">Current Year</h6>
                             <table class="table table-bordered">
                             <thead><tr><th>ID</th><th>Number</th><th>Action</th></tr></thead><tbody>`;
                    unassigned.current.forEach(l => {
                        html += `<tr>
                                    <td>${l.lockerId}</td>
                                    <td>${l.lockerNumber}</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary"
                                                onclick="applyLocker(${l.lockerId}, ${studentId}, 'current')">
                                            Assign
                                        </button>
                                    </td>
                                 </tr>`;
                    });
                    html += `</tbody></table>`;
                } else if (!isOnCurrentWaiting) {
                    // Show "No lockers" + Join Waiting List ONLY if NOT already waiting
                    html += `<div class="alert alert-warning mt-3">
                                 No lockers available for Current Year.<br/>
                                 <button class="btn btn-sm btn-warning mt-2"
                                         onclick="joinWaitingList(${studentId}, ${schoolId}, ${gradeId}, ${new Date().getFullYear()}, 'current')">
                                     Join Waiting List (${new Date().getFullYear()})
                                 </button>
                             </div>`;
                }
            }

            // --- FOLLOWING YEAR ---
            if (gradeId != 24 && !hasFollowingAssigned) {
                if (unassigned.following?.length) {
                    html += `<h6 class="mt-4">Following Year</h6>
                             <table class="table table-bordered">
                             <thead><tr><th>ID</th><th>Number</th><th>Action</th></tr></thead><tbody>`;
                    unassigned.following.forEach(l => {
                        html += `<tr>
                                    <td>${l.lockerId}</td>
                                    <td>${l.lockerNumber}</td>
                                    <td>
                                        <button class="btn btn-sm btn-primary"
                                                onclick="applyLocker(${l.lockerId}, ${studentId}, 'following')">
                                            Assign
                                        </button>
                                    </td>
                                 </tr>`;
                    });
                    html += `</tbody></table>`;
                } else if (!isOnFollowingWaiting) {
                    html += `<div class="alert alert-warning mt-3">
                                 No lockers available for Following Year.<br/>
                                 <button class="btn btn-sm btn-warning mt-2"
                                         onclick="joinWaitingList(${studentId}, ${schoolId}, ${gradeId}, ${new Date().getFullYear() + 1}, 'following')">
                                     Join Waiting List (${new Date().getFullYear() + 1})
                                 </button>
                             </div>`;
                }
            }

            return html;
        }

        // ---------------- Actions ----------------
        async function applyLocker(lockerId,studentId,yearType){
            await fetch(`${window.baseUrl}/Locker/AdminAssignLocker`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lockerId,studentId,yearType})});
            refreshSearch(studentId);
        }
        async function cancelLocker(lockerId,studentId,yearType){
            await fetch(`${window.baseUrl}/Locker/UnassignLocker`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({lockerId,studentId,yearType})});
            refreshSearch(studentId);
        }
        async function approveLocker(lockerId, studentId, yearType) {
            try {
                const res = await fetch(`${window.baseUrl}/Admin/ApproveLocker`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ lockerId, studentId, yearType })
                });

                if (!res.ok) {
                    const errText = await res.text();
                    alert("Error approving locker: " + errText);
                    return;
                }

                const result = await res.json();

                // Show popup if showPopup = true
                if (result.showPopup) {
                    alert(result.message);
                    return; // don't refresh since approval was not completed
                }

                // Otherwise show success and refresh UI
                alert(result.message);
                refreshSearch(studentId);

            } catch (err) {
                console.error("Error approving locker:", err);
                alert("Error approving locker: " + err.message);
            }
        }
        async function cancelWaitingList(studentId,schoolId,gradeId,yearType){
            await fetch(`${window.baseUrl}/api/LockerWaitingList/Unassign`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({studentId,schoolId,gradeId,yearType})});
            refreshSearch(studentId);
        }

                async function assignFromWaiting(studentId, yearType, schoolId, gradeId) {
            try {
                // Fetch the latest student data
                const res = await fetch(`${window.baseUrl}/Admin/All/${studentId}`);
                if (!res.ok) throw new Error(await res.text());
                const studentData = await res.json();

                // Use the full available lists (allCurrent / allFollowing)
                let lockerList = yearType === "current"
                    ? studentData.unassigned?.allCurrent
                    : studentData.unassigned?.allFollowing;

                // If no lockers found, show alert
                if (!lockerList || !lockerList.length) {
                    alert("No lockers available for this year type.");
                    return;
                }

                // Pick the first available locker (could be replaced with a dropdown in future)
                const chosenLocker = lockerList[0];

                // Assign the selected locker
                const assignRes = await fetch(`${window.baseUrl}/Locker/AdminAssignLocker`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        lockerId: chosenLocker.lockerId,
                        studentId,
                        yearType
                    })
                });

                if (!assignRes.ok) {
                    const errText = await assignRes.text();
                    throw new Error(errText || "Failed to assign locker.");
                }

                alert(`Locker ${chosenLocker.lockerNumber} assigned successfully for ${yearType} year.`);
                refreshSearch(studentId);

            } catch (err) {
                console.error("Error assigning from waiting list:", err);
                alert("Error assigning from waiting list: " + err.message);
            }
        }

                async function joinWaitingList(studentId, schoolId, gradeId, year, yearType) {
            try {
                const payload = {
                    studentId,
                    schoolId,
                    gradeId,
                    appliedDate: new Date().toISOString(),
                    currentYear: yearType === "current",
                    followingYear: yearType === "following",
                    status: true
                };

                const response = await fetch(`${window.baseUrl}/api/LockerWaitingList/Assign`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) throw new Error(await response.text() || "Failed to add to waiting list.");

                alert(`Student successfully added to the ${year} waiting list.`);
                refreshSearch(studentId);
            } catch (err) {
                console.error("Error adding to waiting list:", err);
                alert("Error: " + err.message);
            }
        }

        async function updatePayment(studentId, yearType, paid) {
            try {
                const res = await fetch(`${window.baseUrl}/Admin/UpdatePaymentStatus`, {
                    method: "POST",
                    headers: { "Content-Type": "application/x-www-form-urlencoded" },
                    body: new URLSearchParams({
                        studentId: studentId,
                        yearType: yearType,
                        paid: paid
                    })
                });

                if (!res.ok) {
                    const err = await res.text();
                    alert("Error updating payment: " + err);
                } else {
                    const result = await res.json();
                    console.log(result.message);
                }
            } catch (err) {
                alert("Error updating payment: " + err.message);
            }
        }

        function refreshSearch(studentId){
            const studentForm=document.getElementById("studentSearchForm");
            const gradeForm=document.getElementById("gradeSearchForm");
            if(studentForm && document.getElementById("studentSection").style.display!=="none") studentForm.submit();
            else if(gradeForm && document.getElementById("gradeSection").style.display!=="none") gradeForm.submit();
        }

    </script>
}